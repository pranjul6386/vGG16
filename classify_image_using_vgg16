import tensorflow 
from tensorflow.python.keras.applications.vgg16 import VGG16       # example of loading the vgg16 model
model = VGG16()                # load model
model.summary()                # summarize the model

from keras.preprocessing.image import load_img
from keras.preprocessing.image import img_to_array
from keras.applications.vgg16 import preprocess_input
from keras.applications.vgg16 import decode_predictions
from keras.applications.vgg16 import VGG16


image = load_img('dog.jpg', target_size=(224, 224))  # convert the image pixels to a numpy array
image = img_to_array(image)
image = image.reshape((1, image.shape[0], image.shape[1], image.shape[2]))          # reshape data for the model
image = preprocess_input(image)                       # prepare the image for the VGG model
yhat = model.predict(image)                    # predict the probability across all output classes
label = decode_predictions(yhat)                # convert the probabilities to class label
# retrieve the most likely result, e.g. highest probability
label = label[0][0]
                                                  
 print('%s (%.2f%%)' % (label[1], label[2]*100))      # print the classification

